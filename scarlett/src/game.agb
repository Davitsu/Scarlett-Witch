; Davitsu (David Giron) 2015
; Scarlett Witch v0.0.1a

_SPR0_Y     EQU     _OAMRAM ; la Y del sprite 0, es el inicio de la mem de sprites
_SPR0_X     EQU     _OAMRAM+1
_SPR0_NUM   EQU     _OAMRAM+2
_SPR0_ATT   EQU     _OAMRAM+3

_SPR1_Y     EQU     _OAMRAM+4
_SPR1_X     EQU     _OAMRAM+5
_SPR1_NUM   EQU     _OAMRAM+6
_SPR1_ATT   EQU     _OAMRAM+7

game_init:
    ld      a, %11100100    ; Colores de paleta desde el mas oscuro al mas claro, 11 10 01 00
    ld      [rBGP], a       ; escribimos esto en el registro de paleta de fondo

    ld	    a, %11010010
    ld      [rOBP0], a      ; y en la paleta 0 de sprites

    ; creamos otra paleta para la paleta 2 de sprites, inversa a la normal
    ld      a, %00011011
    ld      [rOBP1], a

    ld      a, 0            ; escribimos 0 en los registros de scroll X e Y
    ld      [rSCX], a       ; con lo que posicionamos la pantalla visible
    ld      [rSCY], a       ; al inicio (arriba a la izq) del fondo.

    call    apaga_LCD       ; llamamos a la rutina que apaga el LCD

    ; cargamos los tiles en la memoria de tiles

    ld      hl, GameTiles		; cargamos en HL la direcciÃ³n de nuestro tile
    ld      de, _VRAM			; en DE direcciÃ³n de la memoria de video
    ld      bc, EndGameTiles-GameTiles	; numero de bytes a copiar

    call    CopiaMemoria
 
    ; cargamos el mapa
    ld	    hl, GameMap
    ld	    de, _SCRN0		; mapa 0
    ld	    bc, 32*32
    call    CopiaMemoriaMapa
 
	; bien, tenemos todo el mapa de tiles cargado
	; ahora limpiamos la memoria de sprites
    ld	    de, _OAMRAM		; memoria de atributos de sprites
    ld	    bc, 40*4		; 40 sprites x 4 bytes cada uno
    ld	    l, 0            	; lo vamos a poner todo a cero, asi los sprites
    call    RellenaMemoria	; no usados quedan fuera de pantalla

    ; ahora vamos a crear los sprite.
    ld      a, 74
    ld      [_SPR0_Y], a    ; posición Y del sprite     
    ld      a, 90
    ld      [_SPR0_X], a    ; posición X del sprite
    ld      a, 0
    ld      [_SPR0_NUM], a  ; número de tile en la tabla de tiles que usaremos
    ld      a, 0
    ld      [_SPR0_ATT], a  ; atributos especiales, de momento nada.

    ld      a, [_SPR0_Y]
    ld      [_SPR1_Y], a    ; posición Y del sprite     
    ld      a, [_SPR0_X]
    add	    a, 8
    ld      [_SPR1_X], a    ; posición X del sprite
    ld      a, 2
    ld      [_SPR1_NUM], a  ; número de tile en la tabla de tiles que usaremos
    ld      a, 0
    ld      [_SPR1_ATT], a  ; atributos especiales, de momento nada.

    ; configuramos y activamos el display
    ld      a, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJ16|LCDCF_OBJON
    ld      [rLCDC], a

game_loop:
    ; leemos el pad
    call    lee_pad
    ; lo primero, esperamos por el VBlank, ya que no podemos modificar
    ; la VRAM fuera de Ã©l, o pasarÃ¡n cosas raras
.wait:
    ld      a, [rLY] ; Comprueba si esta en el intervalo vertical (145)
    cp      145
    jr      nz, .wait

    ;ld      a, %00000000
    ;ld      [_PLAYER_DIR], a

    ;ld      a, [sw_pad]
    ;and     PADF_UP     
    ;call    nz, game_init

    ;ld      a, [sw_pad]
    ;and     PADF_DOWN     
    ;call    nz, game_init

    ;ld      a, [sw_pad]
    ;and     PADF_RIGHT     
    ;call    nz, game_init

    ;ld      a, [sw_pad]
    ;and     PADF_LEFT     
    ;call    nz, game_init

    call player_move
    call update_sprites

    ; un pequeÃ±o retardo
    ;call retardo
    ; volvemos a empezar

    call    gbt_update ; Update player

    jr      game_loop

player_move:

.player_move_up:
    ld      a, [sw_pad]
    and     PADF_UP
    jr      z, .player_move_down

    ld      a, [_SPR0_Y]
    dec     a
    ld      [_SPR0_Y], a

    ld      a, 8
    ld      [_SPR0_NUM], a
    ld      a, 10
    ld      [_SPR1_NUM], a

    ld      a, [_SPR0_ATT]
    and     %11011111
    ld      [_SPR0_ATT], a

    ld      a, [_SPR1_ATT]
    and     %11011111
    ld      [_SPR1_ATT], a

.player_move_down:
    ld      a, [sw_pad]
    and     PADF_DOWN
    jr      z, .player_move_right

    ld      a, [_SPR0_Y]
    inc     a
    ld      [_SPR0_Y], a

    ld      a, 0
    ld      [_SPR0_NUM], a
    ld      a, 2
    ld      [_SPR1_NUM], a

    ld      a, [_SPR0_ATT]
    and     %11011111
    ld      [_SPR0_ATT], a

    ld      a, [_SPR1_ATT]
    and     %11011111
    ld      [_SPR1_ATT], a

.player_move_right:
    ld      a, [sw_pad]
    and     PADF_RIGHT
    jr      z, .player_move_left

    ld      a, [_SPR0_X]
    inc     a
    ld      [_SPR0_X], a

    ld      a, 4
    ld      [_SPR0_NUM], a
    ld      a, 6
    ld      [_SPR1_NUM], a

    ld      a, [_SPR0_ATT]
    and     %11011111
    ld      [_SPR0_ATT], a

    ld      a, [_SPR1_ATT]
    and     %11011111
    ld      [_SPR1_ATT], a

.player_move_left:
    ld      a, [sw_pad]
    and     PADF_LEFT
    jr      z, .player_move_end

    ld      a, [_SPR0_X]
    dec     a
    ld      [_SPR0_X], a

    ld      a, 6
    ld      [_SPR0_NUM], a
    ld      a, 4
    ld      [_SPR1_NUM], a

    ld      a, [_SPR0_ATT]
    or      %00100000
    ld      [_SPR0_ATT], a

    ld      a, [_SPR1_ATT]
    or      %00100000
    ld      [_SPR1_ATT], a


.player_move_end:      

    ret

update_sprites:
    ld      a, [_SPR0_Y]
    ld      [_SPR1_Y], a    ; posición Y del sprite     
    ld      a, [_SPR0_X]
    add     a, 8
    ld      [_SPR1_X], a    ; posición X del sprite


    ret